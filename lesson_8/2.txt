
```
if (!("a" in window)) {
    var a = 1;
}
alert(a);
```

Тут все хитро, мы получим a === undefined, в if не зайдем. Когда загружается скрипт,
все переменные, которые создаются с помощью var, сразу же создаются и после этого начинает
выполняться сам скрипт. Т.е. на момент выполнения `"a" in window` у нас уже будет переменная `a`, в которой будет лежать undefined, по умолчанию эти переменные записываются как раз в объект window, а значит мы не попадем в if и в alert просто выведется undefined.

------------------------------------------------------------------------------------------

```
var b = function a(x) {
    x && a(--x);
};
alert(a);
```

Функции `a` не будет, хоть она и не анонимная, она присваивается в переменную, в переменной b будет лежать эта функция, но не в `a` (такая переменная даже не будет определена).

------------------------------------------------------------------------------------------

```
function a(x) {
    return x * 2;
}
var a;
alert(a);
```

Мы увидим функцию, т.е. в переменной `a` будет лежать функция. Причина в том, что все
функции созданные с помощью function, также как и переменные созданные с var создаются в самом начале скрипта и только один раз, т.е. когда интерпретатор начнет разбирать какие переменные надо создать еще до выполнения скрипта, он наткнется на функцию `a`, создаст переменную и положит в эту переменную функцию, после он увидит что создается с помощью var переменная `a`, но так как она уже была создана он ничего делать не станет. 
Затем начнется выполнение скрипта, который и выведет нам нашу функцию.

------------------------------------------------------------------------------------------

```
function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
```

Внутри функции arguments - это наши параметры, третий параметр - это параметр `a`, значит
в переменную `a` мы сначала положим `10` вместо тройки, а затем выведем. 
При использовании "use strict" arguments отделен от параметров функции, т.е. если бы мы использовали "use strict", то мы бы получили `3` в alert(a);

------------------------------------------------------------------------------------------

```
function a() {
    alert(this);
}
a.call(null);
```

Если контекст null, тогда контекст будет взят извне, при условии что не используется
"use strict". Если используется "use strict", то контекст внутри функции будет null.
